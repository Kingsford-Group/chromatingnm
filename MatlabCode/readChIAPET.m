function [pos1, pos2, chrom1, chrom2, pair_name, Z, strand1, strand2, CA, CB, IAB] = readChIAPET(filename, bin, chrom)
%IMPORTFILE Import numeric data from a text file as column vectors.
%   [CHROM1,START1,STOP1,CHROM2,START2,STOP2,PAIR_NAME,Z,STRAND1,STRAND2,CA,CB,IAB]
%   = IMPORTFILE(FILENAME) Reads data from text file FILENAME for the
%   default selection.
%
%   [CHROM1,START1,STOP1,CHROM2,START2,STOP2,PAIR_NAME,Z,STRAND1,STRAND2,CA,CB,IAB]
%   = IMPORTFILE(FILENAME, STARTROW, ENDROW) Reads data from rows STARTROW
%   through ENDROW of text file FILENAME.
%
% Example:
%   [chrom1,start1,stop1,chrom2,start2,stop2,pair_name,Z,strand1,strand2,CA,CB,IAB] = importfile('ENCFF002EMO.tsv',2, 11364);
%
%    See also TEXTSCAN.

% Auto-generated by MATLAB on 2016/07/26 17:08:16

%% Initialize variables.
delimiter = '\t';
startRow = 2;
endRow = inf;

%% Read columns of data as strings:
% For more information, see the TEXTSCAN documentation.
formatSpec = '%q%q%q%q%q%q%q%q%q%q%q%q%q%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to format string.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, endRow(1)-startRow(1)+1, 'Delimiter', delimiter, 'HeaderLines', startRow(1)-1, 'ReturnOnError', false);
for block=2:length(startRow)
    frewind(fileID);
    dataArrayBlock = textscan(fileID, formatSpec, endRow(block)-startRow(block)+1, 'Delimiter', delimiter, 'HeaderLines', startRow(block)-1, 'ReturnOnError', false);
    for col=1:length(dataArray)
        dataArray{col} = [dataArray{col};dataArrayBlock{col}];
    end
end

%% Close the text file.
fclose(fileID);

%% Convert the contents of columns containing numeric strings to numbers.
% Replace non-numeric strings with NaN.
raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
for col=1:length(dataArray)-1
    raw(1:length(dataArray{col}),col) = dataArray{col};
end
numericData = NaN(size(dataArray{1},1),size(dataArray,2));

for col=[1,2,3,4,5,6,8,11,12,13]
    % Converts strings in the input cell array to numbers. Replaced non-numeric
    % strings with NaN.
    rawData = dataArray{col};
    for row=1:size(rawData, 1);
        % Create a regular expression to detect and remove non-numeric prefixes and
        % suffixes.
        regexstr = '(?<prefix>.*?)(?<numbers>([-]*(\d+[\,]*)+[\.]{0,1}\d*[eEdD]{0,1}[-+]*\d*[i]{0,1})|([-]*(\d+[\,]*)*[\.]{1,1}\d+[eEdD]{0,1}[-+]*\d*[i]{0,1}))(?<suffix>.*)';
        try
            result = regexp(rawData{row}, regexstr, 'names');
            numbers = result.numbers;
            
            % Detected commas in non-thousand locations.
            invalidThousandsSeparator = false;
            if any(numbers==',');
                thousandsRegExp = '^\d+?(\,\d{3})*\.{0,1}\d*$';
                if isempty(regexp(numbers, thousandsRegExp, 'once'));
                    numbers = NaN;
                    invalidThousandsSeparator = true;
                end
            end
            % Convert numeric strings to numbers.
            if ~invalidThousandsSeparator;
                numbers = textscan(strrep(numbers, ',', ''), '%f');
                numericData(row, col) = numbers{1};
                raw{row, col} = numbers{1};
            end
        catch me
        end
    end
end


%% Split data into numeric and cell columns.
rawNumericColumns = raw(:, [1,2,3,4,5,6,8,11,12,13]);
rawCellColumns = raw(:, [7,9,10]);


%% Replace non-numeric cells with NaN
R = cellfun(@(x) ~isnumeric(x) && ~islogical(x),rawNumericColumns); % Find non-numeric cells
rawNumericColumns(R) = {NaN}; % Replace non-numeric cells

%% Allocate imported array to column variable names
chrom1 = cell2mat(rawNumericColumns(:, 1));
chrom2 = cell2mat(rawNumericColumns(:, 4));
chrom1(isnan(chrom1)) = 23;
chrom2(isnan(chrom2)) = 23;

if nargin >= 3
    flag1 = chrom1 == chrom;
    flag2 = chrom2 == chrom;
    flag = flag1 & flag2;
    rawNumericColumns = rawNumericColumns(flag, :);
    rawCellColumns = rawCellColumns(flag, :);
end

chrom1 = cell2mat(rawNumericColumns(:, 1));
chrom2 = cell2mat(rawNumericColumns(:, 4));
start1 = cell2mat(rawNumericColumns(:, 2));
stop1 = cell2mat(rawNumericColumns(:, 3));
start2 = cell2mat(rawNumericColumns(:, 5));
stop2 = cell2mat(rawNumericColumns(:, 6));
pair_name = rawCellColumns(:, 1);
Z = cell2mat(rawNumericColumns(:, 7));
strand1 = rawCellColumns(:, 2);
strand2 = rawCellColumns(:, 3);
CA = cell2mat(rawNumericColumns(:, 8));
CB = cell2mat(rawNumericColumns(:, 9));
IAB = cell2mat(rawNumericColumns(:, 10));

pos1 = [start1 stop1];
pos2 = [start2 stop2];

pos1 = ceil((pos1 + 1)/bin);
pos2 = ceil(pos2/bin);
